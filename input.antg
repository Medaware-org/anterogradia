@library "org.medaware.anterogradia.libs.LinearAlgebra" as la
@library "org.medaware.anterogradia.libs.ASCII" as ascii

validator vector {
    la.validate(str = __validator_value())
}

fun quadratic_solve <a: real, b: real, c: real> {
    `neg_b := signflp(expr = &`b)
    `det := sub(left = pow(expr = &`b, pow = 2), right = mul(left = 4, right = mul(left = &`a, right = &`c)))
    `denominator := mul(left = 2, right = &`a)

    # One solution
    if (&`det = 0) {
        la.v { div(left = add(left = &`neg_b, right = sqrt(expr = &`det)), right = &`denominator) }
    } else {
        # Two solutions
        if (&`det > 0) {
            la.v {
                div(left = add(left = &`neg_b, right = sqrt(expr = &`det)), right = &`denominator)
                div(left = sub(left = &`neg_b, right = sqrt(expr = &`det)), right = &`denominator)
            }
        } else { # No real solutions
            "none"
        }
    }
}

# Compute the ray v. sphere intersection and return
# the distance along the ray
fun ray_v_sphere <sphere_c: vector, sphere_r: real, ray_origin: vector, ray_direction: vector> {
    `P := la.sub { &`ray_origin &`sphere_c }
    `a := la.dot (a = &`ray_direction, b = &`ray_direction)
    `b := mul(left = 2.0, right = la.dot (a = &`P, b = &`ray_direction))
    `c := sub(left = la.dot (a = &`P, b = &`P), right = pow(expr = &`sphere_r, pow = 2.0))

    `solutions := eval quadratic_solve(a = &`a, b = &`b, c = &`c)

    if (&`solutions = "none") { signflp(expr = 1.0) } else {
        `dimCount := la.dims(v = &`solutions)
        if (&`dimCount = 0) {
            signflp(expr = 1.0)
        } else {
            if (&`dimCount = 1) {
                la.x(v = &`solutions)
            } else {
                `_first := la.x(v = &`solutions)
                `_second := la.y(v = &`solutions)
                if (&`_first < 0) {
                    &`_second
                } else {
                    if (&`_second < 0) {
                        &`_first
                    } else {
                        la.min (v = &`solutions)
                    }
                }
            }
        }
    }
}

fun ray_direction <width: integer, height: integer, x: integer, y: integer> {
#    `planePosition := la.v {
#        add(left = mul(left = signflp(expr = 1), right = div(left = &`width, right = 2)), right = &`x)
#        add(left = mul(left = signflp(expr = 1), right = div(left = &`height, right = 2)), right = &`y)
#        1.0
#    }
#    `cameraOrigin := la.v { 0 0 0 }
#    la.normalize(v = la.sub { &`planePosition &`cameraOrigin })
    la.normalize ( v =
        la.v {
            sub(left = &`x, right = div(left = &`width, right = 2.0))
            sub(left = &`y, right = div(left = &`height, right = 2.0))
            &`width
        }
    )
}

fun render_pixel <width: integer, height: integer, x: integer, y: integer> {
    `cameraOrigin := la.v { 0 0 0 }
    `direction := eval ray_direction(width = &`width, height = &`height, x = &`x, y = &`y)

    `intersection := eval ray_v_sphere(sphere_c = la.v { 0 0 10 }, sphere_r = 2.0, ray_origin = &`cameraOrigin, ray_direction = &`direction)

    if (&`intersection < 0) {
        la.v { 0 0 0 }
    } else {
        la.v { 255 255 255}
    }
}

fun ppm3_header <width: integer, height: integer> {
    sequence {
        "P3" ascii.endl()
        &`width " " &`height ascii.endl()
        "255" ascii.endl()
    }
}

fun render_all <width: integer, height: integer> {
    `data := eval ppm3_header(width = &`width, height = &`height)

    `x := 0
    while (&`x < &`width) {
        `y := 0
        while (&`y < &`height) {
            `color := eval render_pixel(width = &`width, height = &`height, x = &`x, y = &`y)
            `r := trunc(expr = la.x(v = &`color))
            `g := trunc(expr = la.y(v = &`color))
            `b := trunc(expr = la.z(v = &`color))
            `data := sequence { &`data &`r " " &`g " " &`b ascii.endl() }
            increment (id = `y)
        }
        increment (id = `x)
    }

    &`data
}

eval render_all(width = 100, height = 100)